app.post('/verify', async (req, res) => {
    const { serializedTransaction, signatures, accountName } = req.body;

    try {
        // Retrieve account information
        const accountInfo = await rpc.get_account(accountName);

        // Extract public keys from the account information
        const publicKeys = accountInfo.permissions.map(perm => perm.required_auth.keys[0].key);

        // Determine which keys are required to sign the transaction
        const requiredKeys = await api.authorityProvider.getRequiredKeys({ transaction: serializedTransaction, availableKeys: publicKeys });
        
        // Validate the signatures
        const isTransactionValid = requiredKeys.every(key => signatures.includes(key)); // Ensure that the required keys are in the provided signatures
        
        //check if account is in msig
        const data = await rpc.get_account('nova3mindweb')
        const permissions = data.permissions[1].required_auth.accounts
        const actorToFind = accountName;
        const actorExists = permissions.some(permission => 
        permission.permission.actor === actorToFind
        );
    
        console.log("Account in msig:" + actorExists);
        // Token handling logic (secure this process!)
        if(isTransactionValid && actorExists) {
            const userToken = generateUniqueTokenForUser(accountName);  // Implement this method securely
            res.json({ status: 'success', message: 'Transaction verified successfully', token: userToken });
        } else {
            res.status(400).json({ status: 'error', message: 'Transaction verification failed or not in msig.' });
        }
    } catch (error) {
        console.error(error);
        res.status(500).json({ status: 'error', message: 'Failed to verify transaction' });
    }
});